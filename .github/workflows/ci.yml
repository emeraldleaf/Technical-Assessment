name: SignalBooster MVP - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggers

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📁 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Cache NuGet Packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: 🔍 Verify Test Data
      working-directory: tests
      run: |
        echo "📊 Test Infrastructure Verification"
        echo "Input files: $(find test_notes -name "*.txt" -o -name "*.json" | wc -l)"
        echo "Expected files: $(find test_outputs -name "*_expected.json" | wc -l)"
        echo "📁 Test directories:"
        ls -la test_notes/ test_outputs/ | head -20
        
    - name: 🚀 Run Integration Test Suite
      working-directory: tests
      run: |
        echo "🧪 Executing comprehensive integration tests..."
        chmod +x run-integration-tests.sh
        ./run-integration-tests.sh --verbose
        
    - name: 📊 Upload Test Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: tests/test-report.md
        
    - name: 📋 Upload Test Outputs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-outputs
        path: tests/test_outputs/*_actual.json

  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📁 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore Dependencies
      working-directory: src
      run: dotnet restore SignalBooster.Mvp.csproj
      
    - name: 🔨 Build Application
      working-directory: src
      run: dotnet build SignalBooster.Mvp.csproj --configuration Release --no-restore
      
    - name: 📦 Publish Application
      working-directory: src
      run: |
        dotnet publish SignalBooster.Mvp.csproj \
          --configuration Release \
          --output ./publish \
          --no-build \
          --self-contained false
          
    - name: 📁 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: signalbooster-mvp
        path: src/publish/

  quality-gates:
    name: 🛡️ Quality Gates
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - name: 📁 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 🔍 Code Analysis
      working-directory: src
      run: |
        echo "🔍 Running static code analysis..."
        dotnet build SignalBooster.Mvp.csproj --verbosity normal | tee build-warnings.log
        
        # Check for warnings
        if grep -q "warning" build-warnings.log; then
          echo "⚠️ Build warnings detected:"
          grep "warning" build-warnings.log
        else
          echo "✅ No build warnings found"
        fi
        
    - name: 📈 Test Coverage Analysis
      working-directory: tests
      run: |
        echo "📈 Analyzing test coverage..."
        dotnet test SignalBooster.Mvp.Tests.csproj \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --verbosity minimal
          
    - name: 🏆 Quality Summary
      run: |
        echo "🏆 Quality Gates Summary"
        echo "✅ Integration tests: PASSED"
        echo "✅ Build: SUCCESS"
        echo "✅ Code analysis: COMPLETED"
        echo "📊 Coverage analysis: COMPLETED"

  deployment-readiness:
    name: 🚀 Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test, build, quality-gates]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📁 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: signalbooster-mvp
        path: ./artifacts
        
    - name: 📋 Download Test Report
      uses: actions/download-artifact@v3
      with:
        name: test-report
        path: ./reports
        
    - name: ✅ Deployment Readiness Verification
      run: |
        echo "🚀 SignalBooster MVP - Deployment Readiness Check"
        echo ""
        echo "📦 Build Artifacts:"
        ls -la ./artifacts/
        echo ""
        echo "📊 Test Results:"
        cat ./reports/test-report.md
        echo ""
        echo "✅ All quality gates passed - Ready for deployment!"
        
    - name: 🎉 Success Notification
      run: |
        echo "🎉 CI/CD Pipeline Completed Successfully!"
        echo ""
        echo "✅ Integration Tests: PASSED"
        echo "✅ Build: SUCCESS" 
        echo "✅ Quality Gates: PASSED"
        echo "✅ Deployment Ready: YES"
        echo ""
        echo "🚀 SignalBooster MVP is production-ready!"